1. explian difference between is .NET vs C#
	a. .NET is a framework
		i. It is collection of library
		ii. Its has CLR and garbage collection
		iii. CLR kickout the run the application
	b. C# is programming language
2. .NET framework only run windows
3. .NET core cross platform => 
	a. its better than .Net framework
	b. Broken down the big dll to small dll
	c. Memory is less for loading time
	d. CLI support(common language runtime)
4. .NET 5.0 is unified platform .NET framework, dot net core 
5. What is IL code and what is JIT
	a.  Intermediate language  code is a use to convert c# to partially complied code.
	b. JIT(just in complier) compiled IL code to machine language
6. Its possible view IL code:
	a. Yes we can see Il code visually using IlDSM amd ILSPY 
7. What is the benefit of compiling in to IL code?
	a. The dev env Is different , hosting machine will be different.
	b. Optimize the code for based on the system
8. Does .NET support multiple program language.
	a. Yes, .NET support multiple languages c# , f#, vB.net
	b. Finally its executing on IL code.
9. What is CLR:
	a. Common language runtime
	b. Its convert IL code to native language
	c. That native code run the application , responsible to garbage collector
10. What is manged code and unmanaged code?
	a. Code that executes under the env of CLR is called managed code.
	b. Code that not executes under the env of CLR is called un-managed code.
		i. c++
11. Explain the importance of garbage collector?
	a. Garbage collector is a back ground process which clean unused managed resources. The profiler is help of to see the performance.
12. Can garbage collector claim unmanaged objects?
	a. NO,
13. Explain importance of CTS.(common type system)
	a. Declaring the datatype in c# and f# will be different.
	b. Both of will compiled to a common data type.
14. CLS:
	a. Common language specification is set of rules.  
	b. Case sensitive c#, not vb.net 
15. Stack and heap:(object stored in heap, bool , int other datatypes stored in stack)
	a. Int,bool,decimal are allocated in stack
	b. Int i=10 values are stored on same location
	c. Object:
		i. Pointer stored stack, values stored in heap
16. What are values type and reference type?
	a. Values type: The values stored in  stack
	b. Reference type: Reference types are stored on heap
	c. Eg:
		i. Bool b=ture;b= true stored on stack
		ii. Customer obj=new customer();
		iii. Obj.name="mari";
		iv. Obj: stored stack
		Name="mari stored on heap
17. Explain the boxing and unboxing
	int i = 10;
	object a = i; //i values is moved to reference type
	int z=(int)a; // reference type to value type
18. Consequence of boxing and un-boxing ?
	a. Performance implication(performance issue)
19. Explain casting , implicit casting and explict casting
	int cs = 10;
	double d = cs;// casting(implicit casting)lower datatype to Higer datatype
	double ch = 100.34;
	int excs = ch; // is throw error
	int excs1 =(int) ch;  //explicit casting Data lose will occure
20. Array vs array list?
	a. Array is fixed length , array list size is flexible
	b. Array is strongly type , array list is not strongly type
	int[] arr=new int[3];
	ArrayList arrayList = new ArrayList();
	arrayList.Add(arr);
	arr[0] = 10;
21. Array is strongly type, array list boxing and unboxing will happen so array is good performance.
22. What are generic collection?
	a. Its strongly typed and size flexible
23. Thread?
	a. Parallel execution we need thread.
	b. Using threading namspace
24. Thread vs TPL(Task parallel library):
	a. Task is parallel processing
	b. Taks is abstraction on thread.
	c. Task return the result but thread does not(we use delegate for thread result)
	d. Task (async await)
25. How are exception handled on c#?
	a. Using Try and catch
26. What is use of finally block?
	a. Maximum we use close the Sql connection
	b. if we get the exception or not exception the finally code will run
27. What is the use Of OUT keyword.
	a. Multiple return values we can use out keyword.
28. What is need of delegate?
	a. Delegate is pointer to a function
29. Events:
	a. Events are encapsulation over delegates.
