1. explian difference between is .NET vs C#
	a. .NET is a framework(4.8)
		i. It is collection of library
		ii. Its has CLR and garbage collection
		iii. CLR kickout the run the application
	b. C# is programming language
2. .NET framework only run windows
3. .NET core cross platform => 
	a. its better than .Net framework
	b. Broken down the big dll to small dll
	c. Memory is less for loading time
	d. CLR support(common language runtime)
4. .NET 5.0 is unified platform .NET framework, dot net core 
5. What is IL code and what is JIT
	a.  Intermediate language  code is a use to convert c# to partially complied code.
	b. JIT(just in complier) compiled IL code to machine language
6. Its possible view IL code:
	a. Yes we can see Il code visually using IlDSM amd ILSPY 
7. What is the benefit of compiling in to IL code?
	a. The dev env Is different , hosting machine will be different.
	b. Optimize the code for based on the system
8. Does .NET support multiple program language.
	a. Yes, .NET support multiple languages c# , f#, vB.net
	b. Finally its executing on IL code.
9. What is CLR:
	a. Common language runtime
	b. Its convert IL code to native language
	c. That native code run the application , responsible to garbage collector
10. What is manged code and unmanaged code?
	a. Code that executes under the env of CLR is called managed code.
	b. Code that not executes under the env of CLR is called un-managed code.
		i. c++
11. Explain the importance of garbage collector?
	a. Garbage collector is a back ground process which clean unused managed resources. The profiler is help of to see the performance.
12. Can garbage collector claim unmanaged objects?
	a. NO,
13. Explain importance of CTS.(common type system)
	a. Declaring the datatype in c# and f# will be different.
	b. Both of will compiled to a common data type.
14. CLS:
	a. Common language specification is set of rules.  
	b. Case sensitive c#, not vb.net 
15. Stack and heap:(object stored in heap, bool , int other datatypes stored in stack)
	a. Int,bool,decimal are allocated in stack
	b. Int i=10 values are stored on same location
	c. Object:
		i. Pointer stored stack, values stored in heap
16. What are values type and reference type?
	a. Values type: The values stored in  stack
	b. Reference type: Reference types are stored on heap
	c. Eg:
		i. Bool b=ture;b= true stored on stack
		ii. Customer obj=new customer();
		iii. Obj.name="mari";
		iv. Obj: stored stack
		Name="mari stored on heap
17. Explain the boxing and unboxing
	int i = 10;
	object a = i; //i values is moved to reference type
	int z=(int)a; // reference type to value type
18. Consequence of boxing and un-boxing ?
	a. Performance implication(performance issue)
19. Explain casting , implicit casting and explict casting
	int cs = 10;
	double d = cs;// casting(implicit casting)lower datatype to Higer datatype
	double ch = 100.34;
	int excs = ch; // is throw error
	int excs1 =(int) ch;  //explicit casting Data lose will occure
20. Array vs array list?
	a. Array is fixed length , array list size is flexible
	b. Array is strongly type , array list is not strongly type
	int[] arr=new int[3];
	ArrayList arrayList = new ArrayList();
	arrayList.Add(arr);
	arr[0] = 10;
21. Array is strongly type, array list boxing and unboxing will happen so array is good performance.
22. What are generic collection?
	a. Its strongly typed and size flexible
23. Thread?
	a. Parallel execution we need thread.
	b. Using threading namspace
24. Thread vs TPL(Task parallel library):
	a. Task is parallel processing
	b. Taks is abstraction on thread.
	c. Task return the result but thread does not(we use delegate for thread result)
	d. Task (async await)
25. How are exception handled on c#?
	a. Using Try and catch
26. What is use of finally block?
	a. Maximum we use close the Sql connection
	b. if we get the exception or not exception the finally code will run
27. What is the use Of OUT keyword.
	a. Multiple return values we can use out keyword.
28. What is need of delegate?
	a. Delegate is pointer to a function
29. Events:
	a. Events are encapsulation over delegates.
30.what is difference between Ienumerable vs Ienumerator?
	a. list is using ienumerable internally
	b. Ienumerable interanally used ienumrator
	c.list=>ienumerable=> Ienumerator
	d. list, ienumerable we can use for loop for data retrive
	e.Ienumeumarator we can use while and move next().
31.Iquearble vs ienumerable
	a. Iquerable inherited from Ienumeable
	b. Ienumeable is used  inmemory collection
	c. Iquerable is better in getting result in database.
	d. if we filter in table record ienumerable get the all record then filter will apply in client side.
	e. if we filter in table record Iquerable filter the record from the server side.
	
32.what is destructor?
	a.destructor used to destory the class object when they no longer needed.
	b.~employee(){ }
	c.destructor is called implicityly by the .net framework grbage collector.
33. what is the static class and when to use?
	a.static class is a class which object can not created and not able to inherited and all methods are static.

34.constand vs readonly?
	a. constand we can assign the value on declartion time.
	b.in readonly we can declare the variable and assign the values  on constructor.
	c. const is keyword for contand , readonly is the keyword for readonly
	d. constand is complie time constant and readonly is runtime contant
35.is and as?
	a. there is no relationship bw is vs as
		int i=5;
		bool intchek= i is int;
		intchek will retun true or false.
	b. is operator is used to check the types of an object
	c.As operator is used to perform the conversion 
	 object a="hello"
	 sting str1= a as string;
		

36.Delegates?
	a. deleagate is pointer to a function
	   delegate void calculator(int x)
	b. return type and #no of parameter is same
	c.create object for deletefate then put function name
		calculator calc=new calculctor(add)
		add(20,29)
		calc+=mul;
	d. WHEN WE NEED TO PASS METHOD AS PARAMETER'
	e. Anononyms delegated: delegate pointing method without name are called
37.Events?
	a. Events is notification mechanism that depends on delegats.
	b.events like a wrapper over the delegate to improve its security.
	
38. Method overriding?
	a.using virutal in base class and override in child  class.
	b. when the object create in dervied class , dervied class method will execute
			baseclass obj=new derived class()
39. Method hiding?
	a. using new keyword in child class.
	b. when the object create in dervied class , base class method will execute
			baseclass obj=new derived class()
	
40.collection:
	a.  Not type-safe. Generally slower than generics.
	b.	More flexible than generics, as they can be used to store any type of data.
	c.	ArrayList, HashTable, Queue.

41. Generics:
	a.List<T>, Dictionary<TKey,TValue>, Queue<T>
	b.Type-safe.
	c.Generally faster than collections.
	
42.Finalise and dispose?
	a.dispose is a method of Idisposbale interface. its dispose the object which is no more longer. its called manually by user.
	b. finalize id called my garbage collector automatically and cannot called by user.
	c. there is no difference bw the performace, developer will know when object is create and clean.
	d. garbage colletor will run every 10 minutes.


43.Solid design principle?
s: sinlge responseblity principle: a class 	should have only one responseblity
o: open closed principle: its open for extension and closed for modification
l: liskove substitutuion principle : all the base class methods must be applicable for deervied class.
i: interface segeregation principle :have multiple smaller interface than larger interface.(segregate your interface as much as smaller)
D: dependency inversion principle : high level class must be not dependent upon lower level class.

44. What is dry principle?
	a.DRY stands for don't repeat yourself.
	b.don't write same funtionality multiple times.
	c.istead of you can write one place use to access multiple place using inheritance.
	d. if example we can use common field in base class.
	
45. ref vs out?
	a. out vs ref is c# keyword
	b. ref is two way from caller and calle and back.
	c. out is one way send data back from calle to caller.
	
	   public static void reffunction(ref int somevalue) //calle
        {
            somevalue += somevalue;
        }

        public static void outfntion(out int somevalue)
        {
            somevalue= 0;
            somevalue += somevalue;
        }
		
		int a = 10;
        Console.WriteLine("using ref a values before method call", a);  //10
        reffunction(ref a); //caller
        Console.WriteLine("using ref a values is",a);  //20
        int b = 20;
        Console.WriteLine("using out a values before method call", b); 20
        outfntion(out b); //calle
		Console.WriteLine("using out a values before method call", b); 0
		
46. find max letter and count in string?
string repeat = "hello world";
Dictionary<char, int> map = new Dictionary<char, int>();
foreach (char data in repeat)
{
    if (char.IsLetter(data))
    {
        if (map.Keys.Where(x => x == data).Any() == true)
        {
            map[data] = map[data] + 1;
        }
        else
        {
            map.Add(data,1 );
        }
    }
}
var maxvlaus = map.FirstOrDefault(x => x.Value == map.Values.Max());


47. what is use of  using keyword?
	a.it's used for managing resources and importing namespaces.
	b.using Statement for Resource Management especially for objects that implement the IDisposable interface.